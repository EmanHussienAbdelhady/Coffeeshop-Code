import java.util.ArrayList;

public class CoffeeShop {
    private String name;
    private ArrayList<MenuItem> menu;
    private ArrayList<String> orders;

    public CoffeeShop(String name, ArrayList<MenuItem> menu) {
        this.name = name;
        this.menu = menu;
        this.orders = new ArrayList<String>();
    }

    public void addOrder(String item) throws ItemUnavailableException {
        boolean itemFound = false;
        for (MenuItem menuItem : this.menu) {
            if (menuItem.getItem().equals(item)) {
                this.orders.add(item);
                itemFound = true;
                break;
            }
        }
        if (!itemFound) {
            throw new ItemUnavailableException("This item is currently unavailable!");
        }
    }

    public String fulfillOrder() throws NoOrdersException {
        if (this.orders.size() > 0) {
            String item = this.orders.remove(0);
            return "The " + item + " is ready!";
        } else {
            throw new NoOrdersException("All orders have been fulfilled!");
        }
    }

    public ArrayList<String> listOrders() {
        return this.orders;
    }

    public double dueAmount() {
        double total = 0;
        for (String order : this.orders) {
            for (MenuItem menuItem : this.menu) {
                if (menuItem.getItem().equals(order)) {
                    total +=menuItem.getPrice();
                    break;
                }
            }
        }
        return total;
    }

    public String cheapestItem() throws NoMenuItemsException {
        if (this.menu.isEmpty()) {
            throw new NoMenuItemsException("No items available in the menu!");
        }
        MenuItem cheapest = this.menu.get(0);
        for (MenuItem menuItem : this.menu) {
            if (menuItem.getPrice() < cheapest.getPrice()) {
                cheapest = menuItem;
            }
        }
        return cheapest.getItem();
    }

    public ArrayList<String> drinksOnly() {
        ArrayList<String> drinks = new ArrayList<String>();
        for (MenuItem menuItem : this.menu) {
            if (menuItem.getType().equals("drink")) {
                drinks.add(menuItem.getItem());
            }
        }
        return drinks;
    }

    public ArrayList<String> foodOnly() {
        ArrayList<String> food = new ArrayList<String>();
        for (MenuItem menuItem : this.menu) {
            if (menuItem.getType().equals("food")) {
                food.add(menuItem.getItem());
            }
        }
        return food;
    }
}

class MenuItem {
    private String item;
    private String type;
    private double price;

    public MenuItem(String item, String type, double price) {
        this.item = item;
        this.type = type;
        this.price = price;
    }

    public String getItem() {
        return this.item;
    }

    public String getType() {
        return this.type;
    }

    public double getPrice() {
        return this.price;
    }
}

class ItemUnavailableException extends Exception {
    public ItemUnavailableException(String errorMessage) {
        super(errorMessage);
    }
}

class NoOrdersException extends Exception {
    public NoOrdersException(String errorMessage) {
        super(errorMessage);
    }
}

class NoMenuItemsException extends Exception {
    public NoMenuItemsException(String errorMessage) {
        super(errorMessage);
    }
}
